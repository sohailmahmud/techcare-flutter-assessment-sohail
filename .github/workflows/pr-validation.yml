name: Pull Request Validation

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  validate:
    name: Validate PR
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.35.1'
        channel: 'stable'
        cache: true
    
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '17'
    
    - name: Get Flutter dependencies
      run: flutter pub get
    
    - name: Verify formatting
      run: |
        dart format --output=none --set-exit-if-changed . || {
          echo "‚ùå Code formatting issues found!"
          echo "Run 'dart format .' to fix formatting issues."
          exit 1
        }
    
    - name: Analyze code
      run: |
        flutter analyze || {
          echo "‚ùå Code analysis failed!"
          echo "Please fix the analysis issues before merging."
          exit 1
        }
    
    - name: Run unit tests with coverage
      run: |
        flutter test --coverage --reporter github || {
          echo "‚ùå Tests failed!"
          echo "Please ensure all tests pass before merging."
          exit 1
        }
    
    - name: Check test coverage
      run: |
        # Install lcov for coverage reporting
        sudo apt-get update
        sudo apt-get install -y lcov
        
        # Generate coverage report
        genhtml coverage/lcov.info -o coverage/html
        
        # Calculate coverage percentage
        COVERAGE=$(lcov --summary coverage/lcov.info 2>/dev/null | grep -E "lines\.*:" | sed 's/.*: //' | sed 's/%.*//')
        echo "Test coverage: ${COVERAGE}%"
        
        # Set minimum coverage threshold
        MIN_COVERAGE=70
        if (( $(echo "$COVERAGE < $MIN_COVERAGE" | bc -l) )); then
          echo "‚ùå Test coverage ($COVERAGE%) is below minimum threshold ($MIN_COVERAGE%)"
          echo "Please add more tests to improve coverage."
          exit 1
        else
          echo "‚úÖ Test coverage ($COVERAGE%) meets minimum threshold ($MIN_COVERAGE%)"
        fi
    
    - name: Build APK for validation
      run: |
        flutter build apk --debug || {
          echo "‚ùå Debug build failed!"
          echo "Please fix build issues before merging."
          exit 1
        }
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ github.event.pull_request.number }}
        path: |
          coverage/
          test/
        retention-days: 7
    
    - name: Comment PR with results
      uses: actions/github-script@v6
      if: always()
      with:
        script: |
          const fs = require('fs');
          
          // Read coverage info if available
          let coverageInfo = '';
          try {
            const lcovSummary = await exec.exec('lcov', ['--summary', 'coverage/lcov.info'], {
              silent: true,
              listeners: {
                stdout: (data) => { coverageInfo += data.toString(); }
              }
            });
          } catch (error) {
            coverageInfo = 'Coverage information not available';
          }
          
          const comment = `## üîç PR Validation Results
          
          ### ‚úÖ Checks Completed
          - Code formatting
          - Static analysis  
          - Unit tests
          - Debug build
          
          ### üìä Test Coverage
          \`\`\`
          ${coverageInfo}
          \`\`\`
          
          ### üì± Build Artifacts
          Debug APK has been built successfully and is available in the workflow artifacts.
          
          ---
          *This comment was automatically generated by the PR validation workflow.*`;
          
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  build-ios-check:
    name: iOS Build Check
    runs-on: macos-latest
    if: contains(github.event.pull_request.labels.*.name, 'ios') || contains(github.event.pull_request.title, 'iOS') || contains(github.event.pull_request.title, 'ios')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.35.0'
        channel: 'stable'
    
    - name: Get dependencies
      run: flutter pub get
    
    - name: Build iOS (no code signing)
      run: |
        flutter build ios --release --no-codesign || {
          echo "‚ùå iOS build failed!"
          echo "Please fix iOS-specific build issues."
          exit 1
        }
        echo "‚úÖ iOS build successful"